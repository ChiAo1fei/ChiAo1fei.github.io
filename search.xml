<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[字典]]></title>
    <url>%2F2019%2F02%2F21%2Fday08-%E5%AD%97%E5%85%B8%E3%80%81%E9%9B%86%E5%90%88%2F</url>
    <content type="text"><![CDATA[二、字典 ##字典基础 什么是字典(dict) python提供的容器型数据类型，可变并且无序可变 - 支持元素的增删改无序 - 没有固定的位置，不支持下标操作 字面量和元素 用{}括起来，里面有多个键值对，每个键值对用逗号隔开，每一个键值对是字典的元素{key1:value1, key2:value2, ···}键值对 - key:value;键值对必须成对出现，键值对脱离字典没有意义键 - 必须是不可变的，而且是唯一的。实际一般将字符串作为键值 - 可以使任意类型的数据 注意，字典存储数据，实质是通过值来存储的。key是值对应的标签和获取值的方式 12345dict1 = &#123;&#125; #空字典print(type(dict1))dict1 = &#123;'a': 100, 10:200, (1,2):456&#125; #key唯一且不可变print(dict1,type(dict1)) 什么时候使用字典？ 多个没有相同意义的数据(需要区分)就使用字典。例如：保存一个人的不同信息什么时候使用列表：​ 存储的多个数据是由相同意义的数据(不需要区分)就是用列表。例如：保存一个班的学生信息 123456789101112dict1 = &#123;'name': '郭锐', 'age': 25, 'sex': '人妖', 'height': 170, 'weight': 45&#125;print(dict1['age'])print(dict1.items())# 练习：声明一个变量，保存一个班的学生信息，每个学生需要保存 姓名 电话 年龄stuInfo1 = &#123;'name': '郭锐', 'tel': 110, 'age': 88&#125;stuInfo2 = &#123;'name': '高龙伟', 'tel': 110, 'age': 24&#125;stuInfo3 = &#123;'name': '俞雷', 'tel': 110, 'age': 23&#125;stuInfo4 = &#123;'name': '赵一飞', 'tel': 110, 'age': 22&#125;stuInfo5 = &#123;'name': '李源', 'tel': 110, 'age': 24&#125;stuInfo = [stuInfo1, stuInfo2, stuInfo3, stuInfo4, stuInfo5]print(stuInfo[0].keys()) ##字典的增删改查 查(获取元素的值) 注意：字典中的键值对单独拿出来没有意义 字典[key] —— 获取key对应的值 12345car = &#123;'color': 'yellow', 'type': '跑车', 'price': '5000w'&#125;print(car['color'])print(car['type'])print(car['price'])# 当key不存在的时候会报错KeyError 字典.get(key) - 获取key对应的值 - key不存在的时候不会报错，并且取到一个默认值None字典.get(key,值1) - 获取key对应的值 - key不存在的时候报错，并且取到值1不支持切片 12345print(car.get('type'))print(car.get('speed'))print(car.get('color', '红色'))print(car.get('speed', 0)) 遍历字典注意：直接通过for in 循环取到的是key 1234567891011121314dict1 = &#123;'a': 100, 'b': 200, 'c': 300&#125;# 遍历字典取到的是key (推荐使用)for key in dict1: # key print(key, end=':') # value print(dict1[key])# 遍历字典的values(),获取所有的值for value in dict1.values(): print(value)# 遍历字典的items，直接获取key和value (不建议使用)for key, value in dict1.items(): print(key, value) 增、改 字典[key] = 值 – 当key不存在时，就是添加键值对，key本身就存在时就是修改key对应的值 123456movie = &#123;'name': '喜羊羊与灰太狼', 'type': 'cartoon', 'time': '120min'&#125;movie['评分'] = 7.9print(movie)movie['type'] = 'comedy'print(movie) 删除键值对 del 字典[key] - 删除字典中指定的key对应的键值对 字典.pop(key) —— 取出字典中对应key的值 123456del movie['time']print(movie)name = movie.pop('name')print(name)print(movie) 字典中的方法 比较运算 ==，!= 注意：哦按段两个字典是否相等，只看键值对是否一样，不管键值对顺序 ​ 字典不支持&gt;和&lt;符号 12345print(&#123;'a': 11, 'b': 22&#125; == &#123;'a': 11, 'b': 22&#125;)print(&#123;'a': 11, 'b': 22&#125; == &#123;'b': 22, 'a': 11&#125;)TrueTrue in / not inkey in 字典key not in 字典 ——判断指定的key值是否存在于字典中 123dict1 = &#123;'a':1 ,'z': 2, 'c':3&#125;print('a' in dict1)print('d' not in dict1) 3 .len(),max(),min(),sum()dict(数据) - 数据要求是序列，并且序列中的元素都是有两个元素的子序列 1234567891011# 获取字典中键值对的个数print(len(dict1))# 获取字典中key的最大值,min()一样print(max(dict1))#将序列转换为字典（字符串除外）print(sum(dict1.values()))print(dict([(1 ,2), (3 ,4)]))# 字典转列表/集合/元组 都是将字典中的key取出，作为对应的元素print(list(dict1))print(list(dict1.values())) 相关方法 字典.clear() – 清空字典注意：清空容器推荐使用clear操作，而不是重新赋一个空的容器只有容器本身不存在的时候用{}否则就用字典.clear() 字典.copy() – 复制字典中的元素产生一个新的字典​ 直接赋值，修改其中一个元素，会影响另外一个​ 拷贝赋值，会产生新的地址，赋值后相互不影响 dict.fromkeys(序列，值) – 以序列中所有的元素为key，指定的值作为value 1234new_dict = dict.fromkeys('abc', 10)print(new_dict)new_dict = dict.fromkeys(['name', 'age', 'sex'], '待定')print(new_dict) 字典.keys() - 将所有的key取出，并产生一个新的序列字典.values() - 将所有的value取出，产生一个新的序列字典.items() - 将所有的键值对取出，并且将每一个键值对作为一个元组，产生一个新的序列 字典.setdefault(key, value = None) - 当key不存在时，添加键值对 key：None字典.setdefault(key, value) - 当key不存在时，添加键值对 key：value当key存在的时候，不会修改当前值 字典1.update(字典2) - 将字典2中的键值对去更新字典1，如果字典2中的key，字典1中本身就存在就修改字典1中的key的value，如果key不存在，就添加 123dict2 = &#123;'name': 'xiaohua', 'color': 'black', 'height': 180&#125;dict2.update(&#123;'height': 165, 'age':18&#125;)print(dict2)]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[列表的增删改查]]></title>
    <url>%2F2019%2F02%2F20%2Fday06_02%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%2F</url>
    <content type="text"><![CDATA[1. 增(添加列表元素) append() 列表.append(元素) - 在指定的列表的末尾添加一个指定元素 insert() 列表.insert(下标,元素) - 在指定的下标前插入一个指定的元素123456animes = ['海贼王', '火影忍者', '秦时明月', '画江湖']print(animes)animes.append('郭锐冒险记')print(animes)animes.insert(2,'郭锐吃屎记')print(animes) 2. 删(删除元素) del del 列表[下标] - 删除指定列表下标对应元素 注意：del 是python中的关键字，可以删除任何东西 下标越界(IndexError) remove() 列表.remove(元素) - 删除列表中第一个指定元素 注意：被删除的元素在列表中的元素必须是存在的 ValueError pop() 列表.pop() 列表.pop(下标) 变量名 = 列表.pop() - 将列表末尾元素弹出，并将弹出的值赋给定义的变量 变量名 = 列表.pop(下标) - 将指定列表下标位置的元素弹出，并且赋给定义的变量1234567del animes[-2]print(animes)animes.remove('海贼王')print(animes) pop_animes = animes.pop(0)print(animes)print(pop_animes) 3. 修改元素的值列表[下标] = 修改后的值 — 修改列表中指定下标对应的值1234567grade = [90, 78, 50, 77, 23, 82, 45]count = 0for index in range(len(grade)): if grade[index] &lt; 60: grade[index] = '下一个班见' count += 1print(grade)print('下一个班见的学生有%d个' % count) 4. 常见的坑~~~~~坑一：遍历列表删除部分元素，删除不全！ —– 遍历的时候对原列表切片坑二：通过下标去遍历列表元素的时候，删除元素的时候，下标越界和元素获取不全，解决办法用while循环 1234567891011121314151617181920212223ages = []i = 0 ages.append(int(age)) i += 1print(ages)将小于18的提出来，并存到新的列表中index = 0liitle = []while index &lt; len(ages): if ages[index] &lt; 18: liitle.append(ages.pop(index)) else: index += 1print(ages)print(liitle)通过遍历元素删除，要删除的元素在一起要切片，for age in ages[:]: if age &lt; 18: ages.remove(age)print(ages)while True: age = input('请输入年龄:') if age == 'end': break]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F02%2F20%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. &lt; !–more–&gt; Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
